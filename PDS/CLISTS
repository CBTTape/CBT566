./ ADD NAME=GREGJULN 0103-10091-11081-1339-00020-00024-00020-KBASS
PROC 1 DATEGREG DEBUG LIST
GLOBAL JULIAN
 /*-------------------------------------------------------------*/
 /* CONVERT GREGORIAN DATE TO JULIAN                            */
 /*         MM/DD/YY          11.035                            */
 /*-------------------------------------------------------------*/
IF &DEBUG = DEBUG THEN CONTROL LIST SYMLIST CONLIST PROMPT MSG
IF &LIST  = LIST  THEN CONTROL LIST
SET &MO = &SUBSTR(1:2,&NRSTR(&DATEGREG))
SET &DY = &SUBSTR(4:5,&NRSTR(&DATEGREG))
SET &YR = &SUBSTR(7:8,&NRSTR(&DATEGREG))
SET &OFFSET = &SUBSTR((&MO-1)*3+1:(&MO-1)*3+3,+
    &STR(000031059090120151181212243273304334))
IF &YR//4 = 0 && &MO > 2 THEN +
    SET &OFFSET = &OFFSET + 1
SET &DAY = &OFFSET + &DY
IF &DAY < 100 THEN SET &DAY = &NRSTR(0&DAY)
IF &DAY < 10  THEN SET &DAY = &NRSTR(0&DAY)
SET &JULIAN = &YR..&DAY
WRITE &DATEGREG = &JULIAN
./ ADD NAME=HSML     0105-09044-11081-1317-00018-00105-00017-KBASS
 /*-- Rexx -----------------------------------------------------*/
 /*  This issues HSEND LIST with parameter                      */
 /*  After ARC0140I displayed press enter, it will browse output*/
 /*-------------------------------------------------------------*/
   parse upper arg cmd
   job = MVSVAR('SYMDEF',JOBNAME );
   TEMPDSN="'"USERID()".TEMP."job".hsmlist'";
     XMSG=MSG("OFF");
     "DELETE "TEMPDSN;
     XMSG=MSG(XMSG);
   "hsend list " cmd "ods("TEMPDSN")";
   say "press enter after ARC0140I LIST COMPLETED";
   pull;
   if sysdsn(TEMPDSN) = "OK" then ,
     "ISPEXEC view   DATASET("TEMPDSN")";
    XMSG=MSG("OFF");
    "DELETE "TEMPDSN;
    XMSG=MSG(XMSG);
./ ADD NAME=HSMQ     0105-07044-11081-1318-00108-00097-00018-KBASS
 /*-- Rexx -----------------------------------------------------*/
 /*  This issues HSEND Query with parameter                     */
 /*  The output will appear in browse                           */
 /*-------------------------------------------------------------*/
   parse upper arg cmd
      hsmid = 'HSM'
      mdisp=sysvar(soldisp)
      cname=sysvar('SYSUID')||1;
      "consprof soldisplay(no)"
      "console activate name("cname")";
      address console  "CART HSM ";

      j = 0
      n = 0
      msghsm = 0

      address console "F "hsmid",Q " cmd
      do while msghsm = 0                        /* 11 */
         msghsm = getmsg('resp.','SOL','HSM',,05)
         if msghsm = 0 then do                   /* 10 */
             n = n+1
             do i = 1 to resp.0                 /* 9 */
                k = i+j
                wto.k = resp.i
             end                                /* 9 */
           j = j+resp.0
       end                                     /* 10 */

     end                                        /* 11 */

     "console deactivate"
     "consprof soldisplay("mdisp")"
     count=j
     newl. = "";
     j=0;
 /*-------------------------------------------------------------*/
 /*  reformat line(s) to remove the (CONT.) to make a long line */
 /*-------------------------------------------------------------*/

     do i = 1 to count;
       a1 = word(wto.i,1);
       a2 = word(wto.i,2);
       if a1 = 'ARC0101I' then iterate;
       i1 = index(wto.i,'(CONT.)');
       if i1 > 0  then do;
        newl.j = newl.j||substr(wto.i,i1+7)||" ";
       end;
       else do;
        j=j+1;
        newl.j = wto.i;
       end;
     end;
     newl.0 = j;

 /*-------------------------------------------------------------*/
 /*  reformat to make multiple lines, one task per line         */
 /*-------------------------------------------------------------*/
     newll. =""
     j=0;
     do i = 1 to newl.0
       if word(newl.i,1) = 'ARC0161I'  |,
          word(newl.i,1) = 'ARC0162I'  then do;
         j=j+1;
         newll.j = strip(newl.i,"B");
         iterate;
       end;
       i1=1;
 /*-------------------------------------------------------------*/
 /*   look for the ',' and make a new line                      */
 /*-------------------------------------------------------------*/
       x=newl.i;
       do while i1 > 0;
         x = strip(x,"B");
         i1 = index(x,',');
         if i1 > 0 then do;
           j=j+1;
           if substr(word(x,1),1,3) = 'ARC' then indent="";
           else                                  indent="         ";
           y = substr(x,1,i1-1);
           i3 = 0;
           if index(y,"(") > 0 then do;
             i3 = index(x,")");
             i1 = i3+1;
           end;
           newll.j = indent||substr(x,1,i1-1);
           x = substr(x,i1+1);
         end;
       end; /* do while */
       if strip(x,"B") ¬= "" then do;
         j=j+1;
         if substr(word(x,1),1,3) = 'ARC' then indent="";
         else                                  indent="         ";
         newll.j = indent||x;
       end;
     end; /* do loop */
     newll.0 = j;
 /*  do i = 1 to newll.0        */
 /*    say newll.i;             */
 /*  end                        */
     TEMPDSN="'"||SYSVAR(SYSUID)||".TEMP.HSMQ'";
     XMSG=MSG("OFF");
     "DEL "TEMPDSN;
     XMSG=MSG(XMSG);
     "ALLOC F(NEWL) DA("TEMPDSN") NE SPACE(10 10) TRACKS RECFM(F B)",
       "LRECL(120) reuse" ;
     "EXECIO * DISKW NEWL (STEM NEWLL. FINIS)";
     "ISPEXEC view   DATASET("TEMPDSN")";
     "FREE DA("TEMPDSN")";
./ ADD NAME=JULNGREG 0101-01310-11081-1340-00035-00031-00004-KBASS
PROC 1 DATEJULN DEBUG LIST
GLOBAL GREG
 /*-------------------------------------------------------------*/
 /* CONVERT JULIAN DATE TO GREGORIAN                            */
 /*         11.035         MM/DD/YY                             */
 /*-------------------------------------------------------------*/
IF &DEBUG = DEBUG THEN CONTROL LIST SYMLIST CONLIST PROMPT MSG
IF &LIST  = LIST  THEN CONTROL LIST
  SET &STRDAY=&STR(000031059090120151181212243273304334365)
  SET &STRMON=&STR(   JANFEBMARAPRMAYJUNJULAUGSEPOCTNOVDEC)
  SET &I = 0
  SET &OFFSET = 0
  SET &YR = &EVAL(&SUBSTR(1:2,&NRSTR(&DATEJULN)))
  IF &SUBSTR(3:3,&NRSTR(&DATEJULN)) = &NRSTR(.) THEN +
    SET &DY = &EVAL(&SUBSTR(4:6,&NRSTR(&DATEJULN)))
  ELSE +
    SET &DY = &EVAL(&SUBSTR(3:5,&NRSTR(&DATEJULN)))
  IF &YR//4 = 0 && &DY >= 60 THEN +
    SET &OFFSET = 1
  IF &DY > &EVAL(&SUBSTR(12*3+1:12*3+3,&STRDAY))+&OFFSET THEN DO
    WRITE *** DAY(&DY) IS TOO LARGE ***
    EXIT CODE(12)
  END
 LOOP: +
  SET &I = &I+1
  SET &J = &I*3+1
  SET &LDAY = &EVAL(&SUBSTR(&J:&J+2,&STRDAY))+&OFFSET
  IF &LDAY < &DY THEN GOTO LOOP
  SET &MO = &SUBSTR(&J:&J+2,&STRMON)
  IF &LDAY <= 60 THEN SET &OFFSET = 0
  SET &DAY = &DY-&EVAL(&SUBSTR(&J-3:&J-1,&STRDAY))-&OFFSET
  IF &DAY < 10 THEN SET &DAY = &NRSTR(0&DAY)
  IF &YR < 10 THEN SET &YR  = &NRSTR(0&YR)
  SET &GREG = &MO&STR(/)&DAY&STR(/)&YR
  WRITE &DATEJULN = &GREG
./ ADD NAME=LOCK     0100-11081-11081-1341-00012-00012-00000-KBASS
CONTROL MAIN NOFLUSH
 /*-------------------------------------------------------------*/
 /* LOCK YOUR TERMINAL UP WITH PASSWORD                         */
 /*-------------------------------------------------------------*/
ATTN GOTO RD
WRITENR ENTER PASSWORD ?
READ PSWD
RD: +
WRITE READY
READ VAR
IF &VAR = &PSWD THEN EXIT
GOTO RD
./ ADD NAME=MASSREN  0103-00126-11081-1343-00086-00088-00006-KBASS
PROC 2 FROMQUAL TOQUAL CAT(0) NOPROMPT NOHLQ REUSE REN DEBUG LIST
CONTROL MAIN NOFLUSH,MSG
GLOBAL CATNAME
 /*-------------------------------------------------------------*/
 /* THIS WILL MASS RENAME A HLQ (1 OR MORE LEVELS) TO ANOTHER   */
 /* HLQ                                                         */
 /*-------------------------------------------------------------*/
IF &DEBUG = DEBUG THEN CONTROL LIST SYMLIST CONLIST PROMPT MSG
IF &LIST  = LIST  THEN CONTROL LIST
  IF &SUBSTR(1:1,&FROMQUAL) = &NRSTR(') THEN DO
    SET &L = &LENGTH(&STR(&FROMQUAL)
    SET &FROMQUAL = &SUBSTR(2:&L-1,&STR(&FROMQUAL))
  END
  SET &CCAT =
  IF &CAT ¬= 0 THEN DO
    %CATCNVT &CAT
    SET &CCAT = CAT('&CATNAME')
  END
  IF &NOPROMPT ¬= NOPROMPT THEN DO
ASK: +
    WRITE ==>> ARE YOU SURE YOU WANT TO RENAME ALL DATASETS UNDER
    WRITENR ==>> &FROMQUAL USERID TO &TOQUAL Y/N?
    READ &ANS
    IF &ANS = N THEN +
      EXIT CODE(16)
    IF &ANS ¬= Y THEN +
      GOTO ASK
    PROF NOMSG
  END
      ALLOC F(LISTCAT) NEW REUSE  SP(20 20) TRACK UNIT(SYSDA) -
                 RECFM(V B A) LRECL(125) BLKSIZE(6129)
    PROF   MSG
  IF &REUSE = REUSE THEN GOTO XREU
  CONTROL MAIN NOFLUSH
/*LISTCAT ENT('&FROMQUAL.') OUTFILE(LISTCAT) &CCAT
  LISTCAT LEVEL(&FROMQUAL.) OUTFILE(LISTCAT) &CCAT
XREU: +
  OPENFILE LISTCAT
  CONTROL LIST MAIN NOFLUSH
  SET &HILVL = 1
  IF &NOHLQ ¬= &STR(HLQ) THEN DO
    IF &SYSINDEX(.,&STR(&FROMQUAL)) ¬= 0 THEN DO
      ALTER &STR(')&FROMQUAL&STR(') +
        NEWNAME(&STR(')&TOQUAL&STR(')) &CCAT
      WRITE   ==>> RENAME RC=&LASTCC
      SET &HILVL = 0
      CONTROL NOLIST
    END
  END
  ERROR GOTO EXITS
  ATTN  GOTO EXITS
  CONTROL FLUSH
LOOP: +
  GETFILE LISTCAT
  SET &LEN = &LENGTH(&NRSTR(&LISTCAT))
  IF &LEN < 20 THEN +
    GOTO LOOP
  IF &SUBSTR(2:8,&NRSTR(&LISTCAT)) ¬= &STR(NONVSAM) AND +
     &SUBSTR(2:8,&NRSTR(&LISTCAT)) ¬= &STR(CLUSTER) AND +
     &SUBSTR(2:8,&NRSTR(&LISTCAT)) ¬= &STR(PATH --) AND +
     &SUBSTR(2:8,&NRSTR(&LISTCAT)) ¬= &STR(AIX ---) AND +
     &SUBSTR(2:8,&NRSTR(&LISTCAT)) ¬= &STR(DATA --) AND +
     &SUBSTR(2:8,&NRSTR(&LISTCAT)) ¬= &STR(INDEX -) THEN +
    GOTO LOOP
  SET &SYSDVAL = &SUBSTR(18:&LEN,&NRSTR(&LISTCAT))
  READDVAL OLDDSN
  SET &DLEN = &LENGTH(&NRSTR(&OLDDSN))
  SET &OLDULEN = &LENGTH(&FROMQUAL)
  SET &NEWULEN = &LENGTH(&TOQUAL)
  SET &NEWDSN = &TOQUAL.&SUBSTR(&OLDULEN+1:&DLEN,&NRSTR(&OLDDSN))
  CONTROL LIST
  IF &REN = REN THEN +
    RENAME &STR(')&OLDDSN&STR(') +
      &STR(')&NEWDSN&STR(')
  ELSE +
    ALTER &STR(')&OLDDSN&STR(') +
      NEWNAME(&STR(')&NEWDSN&STR(')) &CCAT

  WRITE   ==>> RENAME RC=&LASTCC
  CONTROL NOLIST
  GOTO LOOP
EXITS: +
  ERROR OFF
  CLOSFILE LISTCAT
  PROF NOMSG
  FREE F(LISTCAT) ATTR(VBA)
./ ADD NAME=WLMREXX  0103-02275-11081-1344-00317-00024-00014-KBASS
 /* REXX */
 /********************************************************************/
 /********************************************************************/
 /*                                                                  */
 /* REXX EXEC:  WLMREXX                                              */
 /*                                                                  */
 /********************************************************************/
 /*                                                                  */
 /* AUTHOR: K.M. (SAM) BASS                                          */
 /*          SAM@KMBASS.COM                                          */
 /*                                                                  */
 /********************************************************************/
 /*  PURPOSE:                                                        */
 /*  REXX EXEC TO READ THE WLM ISPF TABLE PDS AND EXTRACT THE        */
 /*  NAMES OF THE TABLES, THE KEYS AND VARIABLE NAMES AND            */
 /*  GENERATE SAS CODE TO LOAD THE WLM INTO A SAS DATABASE           */
 /********************************************************************/
 /*                                                                  */
 /*   K.M. (SAM) BASS     PROVIDES THIS PROGRAM "AS IS" WITHOUT      */
 /*   WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,  */
 /*   BUT NOT LIMITED TO, THE DOCUMENTATION, THE FUNCTIONS, THE      */
 /*   TECHNICAL ACCURACY OR PERFORMANCE OF THE PROGRAM.              */
 /*                                                                  */
 /*--->    PLEASE UNDERSTAND THAT YOU ARE USING THIS PROGRAM     <---*/
 /*--->                   AT YOUR OWN RISKS.                     <---*/
 /*                                                                  */
 /*   ALL USERS ARE EXPECTED TO INSPECT, EVALUATE AND MAKE FINAL     */
 /*   DECISION CAREFULLY AS TO THE USEFULNESS OF THIS PROGRAM IN     */
 /*   HIS/HER OWN INSTALLATION.                                      */
 /*                                                                  */
 /*--->    PLEASE UNDERSTAND THAT YOU ARE USING THIS PROGRAM     <---*/
 /*--->                   AT YOUR OWN RISKS.                     <---*/
 /*                                                                  */
 /*   ACCEPTANCE AND USE OF THIS PROGRAM AUTOMATICALLY RELEASES      */
 /*   K.M. (SAM) BASS     FROM LIABILITY FOR ANY PROBLEMS CAUSED     */
 /*   BY THE USE OF THIS PROGRAM.                                    */
 /*                                                                  */
 /*--->    PLEASE UNDERSTAND THAT YOU ARE USING THIS PROGRAM     <---*/
 /*--->                   AT YOUR OWN RISKS.                     <---*/
 /*                                                                  */
 /*                                                                  */
 /********************************************************************/
 MAINLINE:
 /*-------------------------------------------------------------*/
 /*  JCL TO BUILD THE SAS TABLES IS AS FOLLOWS                  */
 /* //SASJOB   JOB 1,WLMREXX,NOTIFY=&SYSUID,REGION=4M,          */
 /* //         CLASS=X,MSGCLASS=X,MSGLEVEL=(1,1)                */
 /* //*------- ----------------------------------------------*/ */
 /* //DELETE   EXEC PGM=IDCAMS                                  */
 /* //SYSPRINT DD  SYSOUT=*                                     */
 /* //SYSIN    DD  *                                            */
 /*  DELETE    YOUR.MXG.WLM                                     */
 /*  SET       MAXCC=0                                          */
 /* //*------- ----------------------------------------------*/ */
 /* //S1       EXEC SAS                                         */
 /* //PDB      DD  DISP=(NEW,CATLG),DSN=YOUR.MXG.WLM,           */
 /* //          SPACE=(CYL,(1,1)),UNIT=(SYSDA,1)                */
 /* //SYSIN    DD DISP=SHR,DSN=KBASS.PERM.SAS(WLMDATA)          */
 /*-------------------------------------------------------------*/
 /*-------------------------------------------------------------*/
 /*  WLMDEF IS THE INPUT PDS CONTAINING THE WLM DEFINITIONS     */
 /*  SASOUT IS THE OUTPUT FILE THAT WILL CONTAIN THE GENERATED  */
 /*         SAS CODE                                            */
 /*-------------------------------------------------------------*/
 WLMDEF="'SYS1.WLMDEF'";
 SASOUT="'KBASS.PERM.SAS(WLMDATA)'";
 "ISPEXEC CONTROL ERRORS RETURN"
     CALL INITIAL;
     CALL READMBRS;
     CALL TBQUERY;
     CALL GETROWS;
     CALL CLEANUP;
     EXIT
 /*=============================================================*/
 /*-------------------------------------------------------------*/
 /* INITIAL                                                     */
 /*-------------------------------------------------------------*/
 /*=============================================================*/
INITIAL:
RETURN;

 /*=============================================================*/
 /*-------------------------------------------------------------*/
 /* READ MEMBERS                                                */
 /*-------------------------------------------------------------*/
 /*=============================================================*/
READMBRS:
 "ALLOC F(WLMDEF) DA("WLMDEF") SHR REUSE";
 IF RC > 0 THEN DO;
   SAY "WLMDEF ALLOCATION ERROR = "RC;
   EXIT CODE(12);
 END;
 "ISPEXEC LMINIT DATAID(IDWLM) DDNAME(WLMDEF) ENQ(SHR)"
 IF RC > 0 THEN DO;
   SAY "WLMDEF LMINIT     ERROR = "RC;
   EXIT CODE(12);
 END;
 "ISPEXEC LMOPEN DATAID("IDWLM") OPTION(INPUT)"
 IF RC > 0 THEN DO;
   SAY "WLMDEF LMOPEN     ERROR = "RC;
   EXIT CODE(12);
 END;
 /*-------------------------------------------------------------*/
 /* READ THROUGH THE WLM PDS AND GET THE MEMBERS NAMES AND      */
 /* STORE THEM IN MBRS.IMBR                                     */
 /*-------------------------------------------------------------*/
 MEMBER="";
 "ISPEXEC LMMLIST DATAID("IDWLM") OPTION(LIST) MEMBER(MEMBER)"
 LRC=RC;
 IMBR=0;
 DO UNTIL(LRC>0);
   IMBR=IMBR+1;
   MBR.IMBR=MEMBER;
   "ISPEXEC LMMLIST DATAID("IDWLM") OPTION(LIST) MEMBER(MEMBER)"
   LRC=RC;
 END;
 MBR.0=IMBR;
 "ISPEXEC LMCLOSE DATAID("IDWLM")"
 "ISPEXEC LMMLIST DATAID("IDWLM") OPTION(FREE)"
 "ISPEXEC LMFREE DATAID("IDWLM")"
 "FREE F(WLMDEF)";
RETURN;


 /*=============================================================*/
 /*-------------------------------------------------------------*/
 /* TBDISPLAY                                                   */
 /*-------------------------------------------------------------*/
 /*=============================================================*/
TBQUERY:
 "ISPEXEC LIBDEF WLMDEF DATASET  ID("WLMDEF")"
 /*-------------------------------------------------------------*/
 /* GO THROUGH EACH OF THE TABLE NAMES GENERATED BY 'READMBRS'  */
 /* AND DO A TBQUERY TO GET THE 'KEY NAMES' AND THE COUNT ',    */
 /* 'VARIABLE NAMES' AND THE COUNT, AND A COUNT OF THE ROWS     */
 /*-------------------------------------------------------------*/
 DO IMBR = 1 TO MBR.0;
   "ISPEXEC TBOPEN "MBR.IMBR" NOWRITE LIBRARY(WLMDEF)"
   "ISPEXEC TBQUERY "MBR.IMBR" KEYS(KEYS) NAMES(NAMES) ",
            "ROWNUM(NUMROWS) KEYNUM(NUMKEYS) NAMENUM(NUMNAMES)";
 /*SAY MBR.IMBR NUMROWS NUMKEYS NUMNAMES KEYS;    */
 /*SAY "       " NAMES;                           */
   KEYS.IMBR=KEYS;
   NAMES.IMBR=NAMES;
   NUMROWS.IMBR=NUMROWS;
   NUMKEYS.IMBR=NUMKEYS;
   NUMNAMES.IMBR=NUMNAMES;
   "ISPEXEC TBCLOSE "MBR.IMBR"      LIBRARY(WLMDEF)"
 END;
RETURN;


 /*=============================================================*/
 /*-------------------------------------------------------------*/
 /* GETROWS                                                     */
 /*-------------------------------------------------------------*/
 /*=============================================================*/
GETROWS:
 /*-------------------------------------------------------------*/
 /* THIS GENERATES TWO STEM VARIABLES                           */
 /* FMT.* IS THE SAS CODE TO INITIALIZE THE SAS TABLES          */
 /* SAS.* IS THE SAS CODE TO PUT DATA IN THE SAS TABLES         */
 /* II IS THE COUNTER FOR SAS.*                                 */
 /* JJ IS THE COUNTER FOR FMT.*                                 */
 /*-------------------------------------------------------------*/
 "ISPEXEC LIBDEF WLMDEF DATASET  ID("WLMDEF")"
   II=0;
   JJ=0;
   II=II+1; SAS.II="OPTIONS USER=PDB;";
   JJ=JJ+1; FMT.JJ="OPTIONS USER=PDB;";
 DO IMBR = 1 TO MBR.0;
   SAY "PROCESSING TABLE " MBR.IMBR;
   "ISPEXEC TBOPEN "MBR.IMBR" NOWRITE LIBRARY(WLMDEF)"
   "ISPEXEC TBTOP "MBR.IMBR;
   SAY "TABLE "MBR.IMBR" KEYS " KEYS.IMBR; /**/
   SAY "TABLE "MBR.IMBR" NAMES " NAMES.IMBR; /**/
 /*-------------------------------------------------------------*/
 /* KEYS.IMBR HAS A LIST OF VARIABLE GOTTEN FROM TBQUERY IN THE */
 /* FORM  ' (KEY1 KEY2 KEY3 ... KEYN)'                          */
 /*-------------------------------------------------------------*/
 /* LETS STRIP OFF THE ( ) AND THEN                             */
 /* PARSE EACH VARIABLE NAME INTO ZK.J                          */
 /* I KNOW, I COULD HAVE USED WORDS() AND WORD() FUNCTION...    */
 /*-------------------------------------------------------------*/
   PARSE UPPER VAR KEYS.IMBR "(" XKEYS ")";
   XXKEYS=XKEYS;
   DO J = 1 TO NUMKEYS.IMBR;
     PARSE UPPER VAR XKEYS ZK.J XKEYS;
   END;
 /*-------------------------------------------------------------*/
 /* NAMES.IMBR HAS A LIST OF VARIABLE GOTTEN FROM TBQUERY IN THE*/
 /* FORM  ' (VAR1 VAR2 VAR3 ... VARN)'                          */
 /*-------------------------------------------------------------*/
 /* LETS STRIP OFF THE ( ) AND THEN                             */
 /* PARSE EACH VARIABLE NAME INTO ZN.J                          */
 /*-------------------------------------------------------------*/
   PARSE UPPER VAR NAMES.IMBR "(" XNAMES ")";
   XXNAMES=XNAMES;
   XXVARS = XXKEYS||' '||XXNAMES;
   DO J = 1 TO NUMNAMES.IMBR;
     PARSE UPPER VAR XNAMES ZN.J XNAMES;
   END;
 /*-------------------------------------------------------------*/
 /* GENERATE DATA MBR.IMBR (KEEP= ....); FOR SAS DATA STEP      */
 /* GENERATE DATA MBR.IMBR (KEEP= ....); FOR THE FMT DATA STEP  */
 /*-------------------------------------------------------------*/
    II=II+1; SAS.II="DATA "||MBR.IMBR||" (KEEP=";
    JJ=JJ+1; FMT.JJ="DATA "||MBR.IMBR||" (KEEP=";
    DO IWORD = 1 TO WORDS(XXVARS);
      II=II+1; SAS.II="                 "WORD(XXVARS,IWORD);
      JJ=JJ+1; FMT.JJ="                 "WORD(XXVARS,IWORD);
    END
    II=II+1; SAS.II=");";
    JJ=JJ+1; FMT.JJ=");";
 /*-------------------------------------------------------------*/
 /* GENERATE SET  MBR.IMBR (NULL TABLE) THAT HAS THE VARIABLE LENGS*/
 /*-------------------------------------------------------------*/
    II=II+1; SAS.II=" SET "||MBR.IMBR||";";

 /*-------------------------------------------------------------*/
 /*  GET THE KEY  VARIABLES AND THEIR VALUE                     */
 /*  ALSO SAVE THE MAX LENGTH OF EACH KEYS VARIABLE IN LENK.IMBR.K */
 /*  I USE THE INTERPRET TO TAKE THE VARIABLE NAME IN ZK.K AND  */
 /*  INDIRECT ACCESS THE DATA ASSOCIATED WITH THE VARIABLE      */
 /*  NAME OF THE COLUMN.                                        */
 /*  SO IT IS LIKE  B=INDIRECT(ZK.K)                            */
 /*  BUILDS   VAR1 = 'VAR1.DATA.VALUE';                         */
 /*-------------------------------------------------------------*/
   IF NUMROWS.IMBR > 0 THEN DO ;
     DO J = 1 TO NUMROWS.IMBR;
    "ISPEXEC TBSKIP "MBR.IMBR;
      IF NUMKEYS.IMBR > 0 THEN DO K = 1 TO NUMKEYS.IMBR;
       IF J = 1 THEN LENK.IMBR.K=0;
       INTERPRET "B="ZK.K;
       IF INDEX(B,"'") > 0 THEN CALL QUOTES B ;
       II=II+1; SAS.II = ZK.K||"= '"||TRANSLATE(B,' ','00'X)||"';";
       C= "'"||B||"'";
       LENK.IMBR.K=MAX(LENK.IMBR.K,LENGTH(C));
      END;
      LEN.ZN.IMBR=0;
 /*-------------------------------------------------------------*/
 /*  GET THE NAME VARIABLES AND THEIR VALUE                     */
 /*  ALSO SAVE THE MAX LENGTH OF EACH VARIABLE IN LENN.IMBR.K   */
 /*-------------------------------------------------------------*/
      IF NUMNAMES.IMBR > 0 THEN DO K = 1 TO NUMNAMES.IMBR;
       IF J = 1 THEN LENN.IMBR.K=0;
       INTERPRET "B="ZN.K;
       IF INDEX(B,"'") > 0 THEN CALL QUOTES B ;
       II=II+1; SAS.II = ZN.K||"= '"||TRANSLATE(B,' ','00'X)||"';";
       C= "'"||B||"'";
       LENN.IMBR.K=MAX(LENN.IMBR.K,LENGTH(C));
      END;
       II=II+1;SAS.II="OUTPUT;";
     END;
 /*-------------------------------------------------------------*/
 /*  NOW THAT WE HAVE FINISHED GENERATING ALL OF THE ROWS FOR   */
 /*  THIS TABLE, LETS BUILD THE FORMAT STATEMENTS FOR EACH OF   */
 /*  THE VARIABLES THAT WAS GENERATED BY THE STEP ABOVE         */
 /*-------------------------------------------------------------*/
     IF NUMKEYS.IMBR > 0 THEN DO K = 1 TO NUMKEYS.IMBR;
       JJ=JJ+1;FMT.JJ="INFORMAT "||ZK.K||" $"||LENK.IMBR.K||".;";
     END;
     IF NUMNAMES.IMBR > 0 THEN DO K = 1 TO NUMNAMES.IMBR;
       JJ=JJ+1;FMT.JJ="INFORMAT "||ZN.K||" $"||LENN.IMBR.K||".;";
     END;
     IF NUMKEYS.IMBR > 0 THEN DO K = 1 TO NUMKEYS.IMBR;
       JJ=JJ+1;FMT.JJ=ZK.K||"="||"'';";
     END;
     IF NUMNAMES.IMBR > 0 THEN DO K = 1 TO NUMNAMES.IMBR;
       JJ=JJ+1;FMT.JJ=ZN.K||"="||"'';";
     END;
     II=II+1;SAS.II="RUN;";
 /*-------------------------------------------------------------*/
 /*  GENERATE THE PROC SORT IF THERE ARE ANY KEYS               */
 /*-------------------------------------------------------------*/
     IF NUMKEYS.IMBR > 0 THEN DO;
       II=II+1; SAS.II = "PROC SORT DATA="||MBR.IMBR||";"
       II=II+1; SAS.II = " BY "||XXKEYS||";";
     END;
   SAS.0=II; /* SET THE NUMBER OF ROWS */
   FMT.0=JJ; /* SET THE NUMBER OF ROWS */
   END;
 END;
 "ALLOC F(SASOUT) DA("SASOUT") SHR REUSE";
 "EXECIO * DISKW SASOUT (STEM FMT.     )";
 "EXECIO * DISKW SASOUT (STEM SAS. FINIS)";
 "FREE  F(SASOUT)";
RETURN;
 /*-------------------------------------------------------------*/
 /* CALL QUOTES STRING;                                         */
 /* ROUTINE TO REPLACE A SINGLE QUOTE (') AND CONVERT IT TO     */
 /* TWO SINGLE QUOTES ('')                                      */
 /*-------------------------------------------------------------*/
QUOTES:
 ARG B;
 IQ = INDEX(B,"'",1);
 IQLAST = LENGTH(B);
 DO WHILE (IQ >0 & IQ <= IQLAST);
   IF SUBSTR(B,IQ,2) = "''" THEN DO;
     IQ=IQ+2;
   END;
   ELSE DO;
     IF SUBSTR(B,IQ,1) = "'" THEN DO;
       B=INSERT("'",B,IQ,1);
       IQLAST = LENGTH(B);
       IQ=IQ+1; /* POINT TO NEWLY INSERTED QUOTE */
     END; /* IF SUBSTR(B,IQ1,1) = "'" */
     IQ=IQ+1;  /* NEXT CHAR */
   END;
     IQ = INDEX(B,"'",IQ);
 END;  /* DO WHILE */
RETURN;
 /*-------------------------------------------------------------*/
 /* CLEANUP                                                     */
 /*-------------------------------------------------------------*/
CLEANUP:
RETURN;
