         TITLE ' TAPE UTILITY SUBROUTINES CALLABLE FROM FORTRAN'
* ----------------------------------------------------------
* ATTRIBUTES NORENT, AMODE=24, RMODE=24---------------------
* ----------------------------------------------------------
* CALL   RTAPE(K,BUF,N,&99,&999)       READ       TAPE
*        K   = 1 OR 2 (WHICH TAPE)
*        BUF   = INPUT ARRAY
*        N   = NUMBER OF BYTES READ   R15 = 0  GOOD READ
*        &99   = EOF LABEL            R15 = 4  EOF  READ
*        &999   = ERR EXIT LABEL      R15 = 8  ERR ON READ
* ----------------------------------------------------------
* CALL   WTAPE(K,BUF,N,&9999)          WRITE      TAPE
*        K   = 1 OR 2 (WHICH TAPE)
*        BUF   = OUTPUT ARRAY
*        N = NUMBER OF BYTES TO WRITE R15 = 0  GOOD WRITE
*        &9999  = ERR EXIT LABEL      R15 = 4  ERR ON WRITE
* ----------------------------------------------------------
* CALL   OPENT(K,L)                    OPEN       TAPE
*        K   = 1 OR 2 (WHICH TAPE)
*        L   = 1 FOR INPUT
*        L   = 2 FOR OUTPUT
* ----------------------------------------------------------
* CALL   CLOSET(K,L)                   CLOSE      TAPE
*        K   = 1 OR 2 (WHICH TAPE)
*        L   = 1 FOR INPUT
*        L   = 2 FOR OUTPUT
* ----------------------------------------------------------
* CALL   RWTAPE(K)                     REWIND     TAPE
*        K   = 1 OR 2 (WHICH TAPE)
* ----------------------------------------------------------
* CALL   SFILE(K)                      SKIP       FILE
*        K   = 1 OR 2 (WHICH TAPE)
* ----------------------------------------------------------
* CALL   FSREC(K,N)                    FORWARD-SPACE   RECORD
*        K   = 1 OR 2 (WHICH TAPE)
*        N   = NUMBER OF REC (INPUT)  (MUST BE A VARIABLE)
*            = NUMBER OF REC (OUTPUT) NOT PROCESSED
*              BECAUSE OF EOF
* ----------------------------------------------------------
* CALL   BSREC(K,N)                    BACKWARD-SPACE   RECORD
*        K   = 1 OR 2 (WHICH TAPE)
*        N   = NUMBER OF REC (INPUT) (MUST BE A VARIABLE)
*            = NUMBER OF REC (OUTPUT) NOT PROCESSED
*              BECAUSE OF EOF
* ----------------------------------------------------------
* CALL   FSFILE(K)                     FORWARD-SPACE   FILE
*        K   = 1 OR 2 (WHICH TAPE)
* ----------------------------------------------------------
* CALL   BSFILE(K)                     BACKWARD-SPACE   FILE
*        K   = 1 OR 2 (WHICH TAPE)
* ----------------------------------------------------------
* CALL   WTMARK(K)                     WRITE TAPE MARK
*        K   = 1 OR 2 (WHICH TAPE)
* ----------------------------------------------------------
*
*
*        IF K = 1 THEN  THE SUBROUTINES DOES ITS PROCESSING FROM
*              DDNAME = "SYSUT1"      EX.
*
*//GO.SYSUT1 DD VOL=SER=SYSUT1,UNIT=TAPE,DISP=OLD,LABEL=(1,NL)
*
*        IF K = 2 THEN  THE SUBROUTINES DOES ITS PROCESSING FROM
*              DDNAME = "SYSUT2"      EX.
*
*//GO.SYSUT2 DD VOL=SER=SYSUT2,UNIT=TAPE,DISP=OLD,LABEL=(1,NL)
* ------------------------------------------------------------------*
*              CHANGES                                              *
*KBASS   0519-11 CHECK SYSUT1 AND SYSUT2 TO SEE IF TAPE             *
*KBASS   0524-11 PROPERLY HANDLE RESIDUAL BYTE COUNT (IOBCSW CCW@)  *
*KBASS   0823-12 TEST TO SEE IF 3490 TAPE, IF SO USE 64K MAX CCWS   *
* ------------------------------------------------------------------*
         EJECT
         MACRO
&LABEL   EEXCP &CCW,&D=,&L=
&LABEL   DS    0H                  MOVE CCWS INTO WORK AREA
&IX      SETC  'EX&SYSNDX.'
*
*              USES R14-R1 AND R9
*
         BAL   R9,TAPEDCB          SETS CURRDCBT
         ICM   R15,15,CURRDCBT     GET CURRENT DCB TABLE
         BZ    &IX.CURR
.*
         L     R1,$DDFLAG(R15)     GET @ CURRENT FLAGS
         MVI   ECB,X'7F'           PRESET GOOD I/O IF DUMMY
         TM    0(R1),$NULL         IS IT DD DUMMY ?
         BO    &IX.EXIT
         XC    ECB,ECB             CLEAR ECB
         XC    WIOB(WIOBLN),WIOB   CLEAR WIOB
         L     R1,$DDDCB(,R15)     GET @ CURR DCB
         TM    48(R1),X'10'        IS TAPE OPEN?
         BZ    &IX.D                NO, ABEND
.*       $DROP R1,R15
         MVI   WIOB,X'02'          TURN ON UN RELATED FLAG
         MVC   WIOB+05(3),ECBA     AL3(ECB)
         MVC   WIOB+17(3),=AL3(CCWS) CCW
         STCM  R1,B'0111',WIOB+21  MOVE IN DCB ADDR
.*
         MVC   CCWS(&CCW.LN),&CCW  MOVE CCWS INTO WORK AREA
         AIF   ('&CCW' EQ 'CCWRDL' OR '&CCW' EQ 'CCWWRL').CCWL
         AIF   ('&CCW' EQ 'CCWRDN' OR '&CCW' EQ 'CCWWRN').CCWN
         AGO   .CCWOK              ONLY R/W CCWS NEED DATA/LEN CHNGED
.CCWL    ANOP
.CCWN    ANOP
         LA    R0,&CCW.LN/8        NUMBER OF CCWS IN CHAIN
.*             THIS TEST FOR 64K MAX TAPE DRIVES (3490)         0823-12
.*             IF SO IT USES THE SHORTER &CCW REMOVING THE L    0823-12
         L     R15,CURRDCBT        GET CURRENT DCBT             0823-12
         L     R15,$DDFLAG(,R15)   GET FLAGS                    0823-12
         TM    0(R15),$64KMAX      IS THE 64K MAX DRIVE (3490)  0823-12
         BZ    &IX.0                NO, USE LONG CCWS           0823-12
&NORMAL  SETC  '&CCW'(1,5).'N'
         MVC   CCWS(&NORMAL.LN),&NORMAL MOVE CCWS 64K           0823-12
         LA    R0,&NORMAL.LN/8     64K NUMBER OF CCWS IN CHAIN  0823-12
&IX.0    DS    0H                                               0823-12
         LA    R15,CCWS            LIST OF CCWS
&IX.A    DS    0H
         LR    R14,&L              LENGTH
         CL    R14,F64K            IS CURRENT LEN > 64K
         BL    *+8                  NO, THEN USE IT
         L     R14,F64K             YES, USE 64K
         STCM  &D,B'0111',1(R15)   STORE IN DATA AREA ADDR.
         STCM  R14,B'0011',6(R15)  MOVE IN NUMBER OF BYTES
         S     &L,F64K             CURRENT LEN - 64K
         BNP   &IX.B               NOTHING LEFT TO MOVE
         AL    &D,F64K             INCR DATA AREA
         LA    R15,8(,R15)         NEXT CCW IN CHAIN
         BCT   R0,&IX.A
         B     &IX.B
&IX.B    DS    0H
         MVI   4(R15),$SLI         TURN OFF CHAINING
&IX.C    DS    0H
.CCWOK   ANOP
*        DC    H'1'
*        EXCP  WIOB
         EXCP  WIOB                DO IT
*        WAIT  ECB=ECB
         WAIT  ECB=ECB             WAIT FOR COMPLETION
&IX.EXIT DS    0H
         LA    R15,0               SET RETURN CODE
         B     &IX.RET
&IX.NULL DS    0H
         MVI   ECB,X'7F'
         B     &IX.RET
&IX.D    DS    0H
         WTO   'RTAPE DCB NOT OPEN ',ROUTCDE=11
         ABEND 1
&IX.CURR DS    0H
         WTO   'RTAPE CURRDCBT ZERO',ROUTCDE=11
         ABEND 1
&IX.RET  DS    0H
         MEND
         MACRO
&LABEL   SAVEIT &ENTRY
&LABEL   SAVE  (14,12),T,&ENTRY
         BALR  12,0
         USING *,12
         AIF   ('&ENTRY' NE 'OPENT').NOPENT
         ST    R13,SAVEOT+4
         LA    R5,SAVEOT
         AGO   .GOPENT
.NOPENT  ANOP
         ST    R13,SAVE+4
         LA    R5,SAVE
.GOPENT  ANOP
         ST    R5,8(R13)
         LR    R13,R5
         MEND
         MACRO
&LABEL   RESTORE
&LABEL   L     R13,SAVE+4
         L     R14,12(R13)
         LM    0,12,20(R13)
         MVI   12(R13),X'FF'
         MEND
         EJECT
RTAPE2   CSECT
RTAPE2   AMODE 24
RTAPE2   RMODE 24
RTAPE    EQU   RTAPE2
* CALL   RTAPE(K,BUF,N,&99,&999)       READ       TAPE
*        K   = 1 OR 2 (WHICH TAPE)
*        BUF   = INPUT ARRAY
*        N   = NUMBER OF BYTES READ   R15 = 0  GOOD READ
*        &99   = EOF LABEL            R15 = 4  EOF  READ
*        &999   = ERR EXIT LABEL      R15 = 8  ERR ON READ
* ----------------------------------------------------------
         ENTRY WTAPE,OPENT,CLOSET,RWTAPE,SFILE,FSREC
         ENTRY BSREC,FSFILE,BSFILE,WTMARK
         USING PARMS,R10
         SAVEIT RTAPE
         LR    R10,R1              PARM ADDRESS
         LM    R2,R4,PARMS         DCB + BUFF + LEN
         LR    R5,R3               COPY BUFFER ADDR
         L     R6,=A(256*1024)     256K-1 LENGTH
         EEXCP CCWRDL,D=R5,L=R6    READ IT
         TM    WIOB+12,X'0D'       EOF?
         BO    RDEOF               BIF YES
         CLI   WIOB+04,X'41'       CHANNEL PROGRAM ERROR?
         BNE   RDCHK2               NO, CHECK AGAIN
         TM    WIOB+13,X'40'       INCORRECT LENGTH (SHORT RECORD)
         BO    RTOK                 YES, THEN OK
RDCHK2   DS    0H
         TM    WIOB+12,X'02'       ERR?
         BO    RDERR               BIF YES
         TM    ECB,X'7F'           X'7F' = GOOD
         BNO   RDERR                NO,  ERROR
RTOK     DS    0H
         LA    R15,0
*--------------------------------------------------------------------*
*              CALCULATE BYTES READ                                  *
*        SUM UP THE CCW-LEN FOR EACH CCW,  IOB+9 IS LAST CCW+1(AL3)  *
*        THEN SUBSTRACT THE RESIDUAL BYTE COUNT (IOB+14  AL2)        *
*IOBCSW+1 THE FIRST THREE BYTES ARE THE VIRTUAL ADDRESS POINTING     *
*        AFTER THE LAST-EXECUTED CCW IN YOUR CHANNEL PROGRAM         *
*--------------------------------------------------------------------*
*IOBCSW  DS    0CL7 -    LOW-ORDER SEVEN BYTES OF THE LAST CSW THAT
*                        REFLECTS THE STATUS FOR THIS REQUEST
         SLR   R0,R0
         LA    R1,CCWS
         N     R1,=A(X'00FFFFFF')  TURN OFF HI BYTE.            0524-11
         L     R2,WIOB+8           GET LAST CCW+1
         N     R2,=A(X'00FFFFFF')  TURN OFF HI BYTE.
RTBYTE   DS    0H
         SLR   R15,R15
         ICM   R15,B'0011',6(R1)   GET BYTE COUNT FROM CCW
         ALR   R0,R15              SUM UP BYTE COUNTS.
         CL    R2,=A(0)            IS IOBCCW LAST RD ZERO       0524-11
         BE    RTABEND              YES, BAD CCW ADDRESS        0524-11
         LA    R1,8(,R1)           POINT TO NEXT CCW
         CLR   R1,R2               AT WE AT THE LAST CCW+1?
         BL    RTBYTE               NO,ADD UP NEXT CCW BYTE COUNT
RTSHORT  DS    0H
         SLR   R1,R1
         ICM   R1,B'0011',WIOB+14  GET RESIDUAL BYTE COUNT
         SLR   R0,R1                SUBSTRACT FROM TOTAL
         L     R1,PARMLEN
         ST    R0,0(,R1)           AND SAVE IT
         LA    R15,0
         B     RDRET
RDEOF    DS    0H
         LA    R15,4
         LA    R0,0
         L     R1,PARMLEN          GET LENGTH DATA AREA
         ST    R0,0(,R1)            SET IT TO ZERO
         B     RDRET
RDERR    DS    0H
         LA    R15,8
RDERR2   LA    R0,0
         L     R1,PARMLEN          GET LENGTH DATA AREA
         ST    R0,0(,R1)            SET IT TO ZERO
RDRET    DS    0H
         RESTORE
         BR    R14
RTABEND  DC    H'0'
         EJECT
WTAPE    SAVEIT  WTAPE
* CALL   WTAPE(K,BUF,N,&9999)          WRITE      TAPE
*        K   = 1 OR 2 (WHICH TAPE)
*        BUF   = OUTPUT ARRAY
*        N = NUMBER OF BYTES TO WRITE R15 = 0  GOOD WRITE
*        &9999  = ERR EXIT LABEL      R15 = 4  ERR ON WRITE
* ----------------------------------------------------------
         LR    R10,R1              PARM ADDRESS
         LM    R2,R4,PARMS         @ OF DCB,DATA,LEN
         CLI   WROTE1,0            IF FIRST WRITE                  CBT1
         BNE   NOTVOL1               THEN                          CBT1
         MVI   WROTE1,1              NEXT TIME NOT FIRST WRITE     CBT1
         CLC   0(4,R3),=C'VOL1'      IF IT'S A VOLUME LABEL        CBT1
         BNE   NOTVOL1               AND                           CBT1
         CLC   HOWOPEN,=F'3'         OPENED WITH OPTION 3          CBT1
         BNE   NOTVOL1               THEN                          CBT1
         MVC   4(6,R3),JFCB2+118     CHANGE VOLUME LABEL           CBT1
NOTVOL1  DS    0H                                                  CBT1
         L     R4,0(,R4)           LENGTH
         LR    R5,R3
         LR    R6,R4               NUMBER OF BYTES TO WRITE
         EEXCP CCWWRL,D=R5,L=R6    WRITE IT
         TM    ECB,X'7F'           IS WRITE GOOD
         BO    *+8                 YES
         LA    R15,4
         RESTORE
         BR    R14
         EJECT
RWTAPE   SAVEIT RWTAPE
* CALL   RWTAPE(K)                     REWIND     TAPE
*        K   = 1 OR 2 (WHICH TAPE)
* ----------------------------------------------------------
         LR    R10,R1              PARM ADDRESS
         EEXCP CCWRW
         RESTORE
         BR    R14
         EJECT
FSREC    SAVEIT FSREC
* CALL   FSREC(K,N)                    FORWARD-SPACE   RECORD
*        K   = 1 OR 2 (WHICH TAPE)
*        N   = NUMBER OF REC (INPUT)  (MUST BE A VARIABLE)
*            = NUMBER OF REC (OUTPUT) NOT PROCESSED
*              BECAUSE OF EOF
* ----------------------------------------------------------
         LR    R10,R1              PARM ADDRESS
         LM    R2,R3,PARMS         DCB & SKIP #
         L     R4,0(R3)            FILES TO SKIP
         C     R4,F0
         BNH   FSRET
FSREE    DS    0H                  FOWARD SPACE REC
         EEXCP CCWFSR
         TM    WIOB+12,X'03'       EOF?
         BM    *+8
         BCT   R4,FSREE            DO N TIMES
         ST    R4,0(R3)
FSRET    RESTORE
         BR    R14
         EJECT
BSREC    SAVEIT BSREC
* CALL   BSREC(K,N)                    BACKWARD-SPACE   RECORD
*        K   = 1 OR 2 (WHICH TAPE)
*        N   = NUMBER OF REC (INPUT) (MUST BE A VARIABLE)
*            = NUMBER OF REC (OUTPUT) NOT PROCESSED
*              BECAUSE OF EOF
* ----------------------------------------------------------
         LR    R10,R1              PARM ADDRESS
         LM    R2,R3,PARMS         DCB & SKIP #
         L     R4,0(R3)            RECORDS TO BACKSPACE
         C     R4,F0
         BNH   BSRET
BSREE    DS    0H                  BACKWARD SPACE REC
         EEXCP CCWBSR
         TM    WIOB+12,X'03'       EOF?
         BM    *+8
         BCT   R4,BSREE            DO N TIMES
         ST    R4,0(R3)
BSRET    RESTORE
         BR    R14
         EJECT
FSFILE SAVEIT FSFILE
* CALL   FSFILE(K)                     FORWARD-SPACE   FILE
*        K   = 1 OR 2 (WHICH TAPE)
* ----------------------------------------------------------
SFILE    EQU   FSFILE
         LR    R10,R1              PARM ADDRESS
         EEXCP CCWFSF              FOWARD SPACE FILE
         RESTORE
         BR    R14
         EJECT
BSFILE   SAVEIT BSFILE
* CALL   BSFILE(K)                     BACKWARD-SPACE   FILE
*        K   = 1 OR 2 (WHICH TAPE)
* ----------------------------------------------------------
         LR    R10,R1              PARM ADDRESS
         EEXCP CCWBSF              BACKWARD SPACE FILE
         RESTORE
         BR    R14
         EJECT
WTMARK   SAVEIT WTMARK
* CALL   WTMARK(K)                     WRITE TAPE MARK
*        K   = 1 OR 2 (WHICH TAPE)
* ----------------------------------------------------------
         LR    R10,R1              PARM ADDRESS
         EEXCP CCWWTM              WRITE TAPE MARK
WTEOF    RESTORE
         BR    R14
         EJECT
OPENT    SAVEIT OPENT
* CALL   OPENT(K,L)                    OPEN       TAPE
*        K   = 1 OR 2 (WHICH TAPE)
*        L   = 1 FOR INPUT
*        L   = 2 FOR OUTPUT
* ----------------------------------------------------------
         LR    R10,R1              PARM ADDRESS
         BAL   R9,TAPEDCB          SET CURRENT DCBT
         L     R2,CURRDCBT         GET CURRENT DCBT
         L     R3,$DDDCB(,R2)      GET DCB
         L     R4,$DDFLAG(,R2)     GET FLAGS
         L     R5,PARMOPEN         @ OF PARMOPEN 1 OR 2
         DEVTYPE $DDNAM(R2),DEVDT
         CLC   DEVD1,=F'0'               IS A DD DUMMY
         BNE   XOPEN1
         OI    0(R4),$NULL         YES IT IS DD DUMMY
         B     OTRET                EXIT THE OPEN.
XOPEN1   DS    0H
         CLC   F1,0(R5)            OPEN FOR INPUT?
         BE    OPENIN
         CLC   F2,0(R5)            OPEN FOR OUTPUT?
         BE    OPENOUT
         CLC   F3,0(R5)            OPEN FOR OUTPUT WITH NEW VOL1   CBT1
         BE    OPENOUT                                             CBT1
         B     OPENERR
OPENIN   DS    0H
         OI    0(R4),$INPUT
         MVC   DEVD1,DEVDT         COPY DEVTYPE                 0519-11
         TM    DEVD1+02,X'80'      IS THIS TAPE                 0519-11
         BZ    NOTTAPE1            NO                           0519-11
         CLC   =X'8081',DEVD1+2    IS THIS A 3490?              0823-12
         BNE   OPENINA              NO                          0823-12
         OI    0(R4),$64KMAX       YES, SET 64K MAX             0823-12
OPENINA  DS    0H
         OPEN  ((3),INPUT)
         B     OTRET
OPENOUT  DS    0H
         OI    0(R4),$OUTPUT
         MVC   DEVD2,DEVDT         COPY DEVTYPE                 0519-11
         TM    DEVD2+02,X'80'      IS THIS TAPE                 0519-11
         BZ    NOTTAPE2            NO                           0519-11
         MVC   HOWOPEN,0(R5)       SAVE 2 OR 3                     CBT1
         MVI   WROTE1,0            NEXT WRITE WILL BE FIRST WRITE  CBT1
         RDJFCB ((3))                                              CBT1
         OPEN  ((3),OUTPUT)
         B     OTRET
OTRET    L     R13,SAVEOT+4
         RETURN (14,12),RC=0
OPENERR  DS    0H
         WTO   'RTAPE, INVALID OPEN DCB NUMBER',ROUTCDE=11
         ABEND 4
NOTTAPE1 DS    0H                                               0519-11
         WTO   'RTAPE SYSUT1 NOT TAPE',ROUTCDE=11               0519-11
         ABEND 101
NOTTAPE2 DS    0H                                               0519-11
         WTO   'RTAPE SYSUT2 NOT TAPE',ROUTCDE=11               0519-11
         ABEND 102
         EJECT
CLOSET   SAVEIT CLOSET
* CALL   CLOSET(K,L)                   CLOSE      TAPE
*        K   = 1 OR 2 (WHICH TAPE)
*        L   = 1 FOR INPUT
*        L   = 2 FOR OUTPUT
* ----------------------------------------------------------
         LR    R10,R1              PARM ADDRESS
         BAL   R9,TAPEDCB
         L     R2,CURRDCBT         GET CURRENT DCBT
         L     R3,$DDDCB(,R2)      GET DCB
         L     R4,$DDFLAG(,R2)     GET FLAGS
         TM    0(R4),$INPUT+$OUTPUT OPENED AT ALL?
         BZ    CLOSERET
         CLOSE ((3),REWIND)
CLOSERET DS    0H
         RESTORE
         LA    R15,0
         BR    R14
*--------------------------------------------------------------------*
*--------------------------------------------------------------------*
*              INTERNAL ROUTINES                                     *
*--------------------------------------------------------------------*
*--------------------------------------------------------------------*
*--------------------------------------------------------------------*
*              TAPEDCB  SET CURRDCBT                                 *
*--------------------------------------------------------------------*
         DROP  R12
TAPEDCB  DS    0H
         BALR  R11,0
         USING *,R11
         XC    CURRDCBT,CURRDCBT
         L     R1,PARMDCB
         CLC   F1,0(R1)            IS IT SYSUT1
         BE    TAPEUT10             YES
         CLC   F2,0(R1)            IS IT SYSUT2
         BE    TAPEUT20             YES
         WTO   'RTAPE DCB VALID IN VALID',ROUTCDE=11
         ABEND 2
TAPEUT10 DS    0H
         LA    R0,DDUT1
         ST    R0,CURRDCBT
         BR    R9
TAPEUT20 DS    0H
         LA    R0,DDUT2
         ST    R0,CURRDCBT
         BR    R9
         DROP  R11
         EJECT
*--------------------------------------------------------------------*
*              DATA                                                  *
*--------------------------------------------------------------------*
SAVE     DS    18F
SAVEOT   DS    18F
F0       DC    F'0'
F1       DC    F'1'
F2       DC    F'2'
F3       DC    F'3'                                                CBT1
HOWOPEN  DC    F'0'                                                CBT1
WROTE1   DC    F'0'                                                CBT1
FFFF     DC    X'FFFF',AL2(0)
F64K     DC    A(X'0000FFFF')
*
CURRDCBT DC    A(0)                POINTS TO CURRENT DDUT BELOW
$DDNAM   EQU   0
$DDFLAG  EQU   8
$DDDCB   EQU   12
*
NOTES    DC    CL32'64K VERSION'
DDUT1    DC    CL8'SYSUT1',A(FLAG1),A(SYSUT1)
DDUT2    DC    CL8'SYSUT2',A(FLAG2),A(SYSUT2)
*
FLAG1    DC    X'00'
FLAG2    DC    X'00'
$NULL    EQU   X'80'
$INPUT   EQU   X'40'
$OUTPUT  EQU   X'20'
$64KMAX  EQU   X'10'
DUM      DS    C
*--------------------------------------------------------------------*
*              CCW AND IOB                                           *
*--------------------------------------------------------------------*
         DC    0D'0',CL8'IOB HERE'
WIOB     DC    7D'0'
WIOBLN   EQU   *-WIOB
         DC    0D'0',CL8'CCW HERE'
CCWS     DC    8D'0'               WORKING CCWS
ECB      DC    F'0'
ECBA     DC    AL3(ECB),X'00'
*
WDEC     DC    2D'0'               WORKING STORAGE
DEVDT    DC    F'0'                DEVTYPE FOR GENERIC DEVTYPE  0519-11
DEVD1    DC    F'0'                DEVTYPE FOR SYSUT1           0519-11
DEVD2    DC    F'0'                DEVTYPE FOR SYSUT2¢          0519-11
*
XJFCB1   DC    0F'0',X'87',AL3(JFCB1)
XJFCB2   DC    0F'0',X'87',AL3(JFCB2)
JFCB1    DC    0F'0',CL176' '
JFCB2    DC    0F'0',CL176' '
         EJECT
SYSUT1   DCB   DDNAME=SYSUT1,DSORG=PS,RECFM=U,BUFNO=2,                 X
               OPTCD=Z,EXLST=XJFCB1,  DCBE=SYSUT1E,                    X
               DEVD=TA,EODAD=RDEOF,MACRF=(E),BUFOFF=0
SYSUT1E  DCBE  BLKSIZE=256*1024
         EJECT
SYSUT2   DCB   DDNAME=SYSUT2,DSORG=PS,RECFM=U,BUFNO=2,                 X
               OPTCD=Z,EXLST=XJFCB2,  DCBE=SYSUT2E,                    X
               DEVD=TA,EODAD=RDEOF,MACRF=(E),BUFOFF=0
SYSUT2E  DCBE  BLKSIZE=256*1024
         LTORG ,
         DROP  ,
$DC      EQU   X'80'               DATA CHAINING
$CC      EQU   X'40'               COMMAND CHAINING
$SLI     EQU   X'20'               SUPPRESS LENGTH INDICATOR
*              CMD  ,BUFFER ADDR ,FLGS    ,LENGTH
         USING BUF1,R9
CCWRDN   CCW   X'02',65535*0,$DC+$SLI,X'FFFF' READ NORMAL
         CCW   X'00',65535*0,$SLI,X'0001'     READ NORMAL
CCWRDNLN EQU   *-CCWRDN
CCWWRN   CCW   X'01',65535*0,$DC+$SLI,X'FFFF' WRITE NORMAL
         CCW   X'00',65535*0,$SLI,X'0001'     WRITE NORMAL
CCWWRNLN EQU   *-CCWWRN
CCWRDL   CCW   X'02',65535*0,$DC+$SLI,X'FFFF' READ LARGE
         CCW   X'00',65535*1,$DC+$SLI,X'FFFF'
         CCW   X'00',65535*2,$DC+$SLI,X'FFFF'
         CCW   X'00',65535*3,$DC+$SLI,X'FFFF'
         CCW   X'00',65535*4,$SLI,4
CCWRDLLN EQU   *-CCWRDL
CCWWRL   CCW   X'01',65535*0,$DC+$SLI,X'FFFF' WRITE LARGE
         CCW   X'00',65535*1,$DC+$SLI,X'FFFF'
         CCW   X'00',65535*2,$DC+$SLI,X'FFFF'
         CCW   X'00',65535*3,$DC+$SLI,X'FFFF'
         CCW   X'00',65535*4,$SLI,4
CCWWRLLN EQU   *-CCWWRL
CCWRW    CCW   X'07',DUM,$SLI,1    REWIND TAPE
CCWRWLN  EQU   *-CCWRW
CCWWTM   CCW   X'1F',DUM,$SLI,1    WRITE TAPE MARK
CCWWTMLN EQU   *-CCWWTM
CCWFSF   CCW   X'3F',DUM,$SLI,1    FOWARD SPACE FILE
CCWFSFLN EQU   *-CCWFSF
CCWBSF   CCW   X'2F',DUM,$SLI,1    BACK SPACE FILE
CCWBSFLN EQU   *-CCWBSF
CCWFSR   CCW   X'37',DUM,$SLI,1    FOWARD SPACE RECORD
CCWFSRLN EQU   *-CCWFSR
CCWBSR   CCW   X'27',DUM,$SLI,1    BACK SPACE RECORD
CCWBSRLN EQU   *-CCWBSR
BUF1     DS    X
         EJECT ,
*--------------------------------------------------------------------*
*              DSECTS                                                *
*--------------------------------------------------------------------*
PARMS    DSECT ,
PARMDCB  DS    A        DCB        @ -> F'1' OR F'2'
PARMDATA DS    A        READ/WRITE @ OF BUFFER
PARMOPEN EQU   PARMDATA OPEN       @ -> F'1' INPUT, F'2' OUTPUT
PARMSKIP EQU   PARMDATA FSR/BSR    @ -> COUNT OF RECORDS TO SKIP
PARMLEN  DS    A        READ/WRITE @ OF LENGTH
*
         IEZIOB DSECT=YES
         YREGS ,
         END
